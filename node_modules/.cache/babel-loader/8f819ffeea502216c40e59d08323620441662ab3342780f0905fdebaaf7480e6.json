{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"pcBuilderAi\"\n};\nconst _hoisted_2 = {\n  id: \"pcBuilderAi\"\n};\nconst _hoisted_3 = {\n  ref: \"el\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => {\n      $options.callEndPointIgb({\n        url: 'https://api.igdb.com/v4/games/',\n        data: 'fields *; limit 100'\n      });\n    })\n  }, \"aaaa\"), _createElementVNode(\"p\", null, _toDisplayString($data.token), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, null, 512 /* NEED_PATCH */)])]);\n}","map":{"version":3,"mappings":";;EACOA,EAAE,EAAC;AAAa;;EACdA,EAAE,EAAC;AAAa;;EAGdC,GAAG,EAAC;AAAI;;uBAJjBC,oBAMM,OANNC,UAMM,GALJC,oBAIM,OAJNC,UAIM,GAHJD,oBAAmH;IAA1GE,OAAK;MAAEC,wBAAe;QAAAC;QAAAC;MAAA;IAAA;KAAuE,MAAI,GAC1GL,oBAAkB,4BAAZM,WAAK,kBACXN,oBAAoB,OAApBO,UAAoB","names":["id","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","onClick","$options","url","data","$data","_hoisted_3"],"sourceRoot":"","sources":["D:\\Area de trabalho\\Portifolio\\Portifolio\\src\\components\\pcBuilderAi\\pcBuilderAi.vue"],"sourcesContent":["<template>\r\n  <div id=\"pcBuilderAi\">\r\n    <div id=\"pcBuilderAi\">\r\n      <button @click=\"callEndPointIgb({url: 'https://api.igdb.com/v4/games/', data:'fields *; limit 100'})\">aaaa</button>\r\n      <p>{{ token }}</p>\r\n      <div ref=\"el\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import CryptoJS from 'crypto-js';\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nexport default {\r\n  \r\n  name: \"pcBuilderAi\",\r\n  data() {\r\n    return {\r\n      token: \"\",\r\n      tokenExpireTime: null,\r\n      lastRequest: null,\r\n    };\r\n  },\r\n  methods: {\r\n    async getIgbToken() {\r\n      if (moment().isAfter(this.lastRequest) || !this.tokenExpireTime) {\r\n        let response = await axios.post(\r\n          `https://id.twitch.tv/oauth2/token?client_id=${process.env.VUE_APP_TWITCH_CLIENT_ID}&client_secret=${process.env.VUE_APP_TWITCH_CLIENT_SECRET}&grant_type=client_credentials`\r\n        );\r\n        this.token = response.data.access_token;\r\n        this.tokenExpireTime = response.data.expires_in;\r\n        this.lastRequest = moment().add(this.tokenExpireTime, \"seconds\");\r\n        return response.data.access_token.toString();\r\n      }\r\n    },\r\n    async callEndPointIgb(config) {\r\n      //Always send the same header for this call, dont need to put on the parameter when calling.  \r\n      config.headers = {\"Client-ID\": process.env.VUE_APP_TWITCH_CLIENT_ID, \"Authorization\": `Bearer ${this.token}`}\r\n      console.log(config.headers)\r\n      try {\r\n        const response = await axios(config)\r\n        console.log(response)\r\n      }catch(error) {\r\n        console.log('callEndPoint ERRO: ' + error)\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.getIgbToken()\r\n  }\r\n  \r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}