{"ast":null,"code":"// import CryptoJS from 'crypto-js';\nimport axios from \"axios\";\nimport moment from \"moment\";\nexport default {\n  name: \"pcBuilderAi\",\n  data() {\n    return {\n      token: \"\",\n      tokenExpireTime: null,\n      lastRequest: null,\n      nextTokenRequest: localStorage\n    };\n  },\n  methods: {\n    async getIgbToken() {\n      if (moment().isAfter(this.lastRequest) || !this.tokenExpireTime) {\n        let response = await axios.post(`https://id.twitch.tv/oauth2/token?client_id=${process.env.VUE_APP_TWITCH_CLIENT_ID}&client_secret=${process.env.VUE_APP_TWITCH_CLIENT_SECRET}&grant_type=client_credentials`);\n        this.token = response.data.access_token;\n        this.tokenExpireTime = response.data.expires_in;\n        localStorage.setItem('nextTokenRequest', moment().add(this.tokenExpireTime, \"seconds\").toString());\n        return response.data.access_token.toString();\n      }\n    },\n    async callEndPoint(url, method) {\n      if (method == `POST`) {\n        axios.post(url);\n      }\n    }\n  },\n  mounted() {\n    this.getIgbToken();\n  }\n};","map":{"version":3,"mappings":"AAWA;AACA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,MAAK,MAAO,QAAQ;AAE3B,eAAe;EAEbC,IAAI,EAAE,aAAa;EACnBC,IAAI,GAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,eAAe,EAAE,IAAI;MACrBC,WAAW,EAAE,IAAI;MACjBC,gBAAgB,EAAEC;IACpB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAW,GAAG;MAClB,IAAIT,MAAM,EAAE,CAACU,OAAO,CAAC,IAAI,CAACL,WAAW,KAAK,CAAC,IAAI,CAACD,eAAe,EAAE;QAC/D,IAAIO,QAAO,GAAI,MAAMZ,KAAK,CAACa,IAAI,CAC5B,+CAA8CC,OAAO,CAACC,GAAG,CAACC,wBAAyB,kBAAiBF,OAAO,CAACC,GAAG,CAACE,4BAA6B,gCAA8B,CAC7K;QACD,IAAI,CAACb,KAAI,GAAIQ,QAAQ,CAACT,IAAI,CAACe,YAAY;QACvC,IAAI,CAACb,eAAc,GAAIO,QAAQ,CAACT,IAAI,CAACgB,UAAU;QAC/CX,YAAY,CAACY,OAAO,CAAC,kBAAkB,EAAEnB,MAAM,EAAE,CAACoB,GAAG,CAAC,IAAI,CAAChB,eAAe,EAAE,SAAS,CAAC,CAACiB,QAAQ,EAAE;QACjG,OAAOV,QAAQ,CAACT,IAAI,CAACe,YAAY,CAACI,QAAQ,EAAE;MAC9C;IACF,CAAC;IACD,MAAMC,YAAY,CAACC,GAAG,EAAEC,MAAM,EAAE;MAC9B,IAAIA,MAAK,IAAM,MAAK,EAAE;QACpBzB,KAAK,CAACa,IAAI,CAACW,GAAG,CAAC;MACjB;IACF;EACF,CAAC;EACDE,OAAO,GAAG;IACR,IAAI,CAAChB,WAAW,EAAC;EACnB;AAEF,CAAC","names":["axios","moment","name","data","token","tokenExpireTime","lastRequest","nextTokenRequest","localStorage","methods","getIgbToken","isAfter","response","post","process","env","VUE_APP_TWITCH_CLIENT_ID","VUE_APP_TWITCH_CLIENT_SECRET","access_token","expires_in","setItem","add","toString","callEndPoint","url","method","mounted"],"sourceRoot":"","sources":["D:\\Area de trabalho\\Portifolio\\Portifolio\\src\\components\\pcBuilderAi\\pcBuilderAi.vue"],"sourcesContent":["<template>\r\n  <div id=\"pcBuilderAi\">\r\n    <div id=\"pcBuilderAi\">\r\n      <button @click=\"getIgbToken()\">aaaa</button>\r\n      <p>{{ token }}</p>\r\n      <div ref=\"el\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import CryptoJS from 'crypto-js';\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nexport default {\r\n  \r\n  name: \"pcBuilderAi\",\r\n  data() {\r\n    return {\r\n      token: \"\",\r\n      tokenExpireTime: null,\r\n      lastRequest: null,\r\n      nextTokenRequest: localStorage\r\n    };\r\n  },\r\n  methods: {\r\n    async getIgbToken() {\r\n      if (moment().isAfter(this.lastRequest) || !this.tokenExpireTime) {\r\n        let response = await axios.post(\r\n          `https://id.twitch.tv/oauth2/token?client_id=${process.env.VUE_APP_TWITCH_CLIENT_ID}&client_secret=${process.env.VUE_APP_TWITCH_CLIENT_SECRET}&grant_type=client_credentials`\r\n        );\r\n        this.token = response.data.access_token;\r\n        this.tokenExpireTime = response.data.expires_in;\r\n        localStorage.setItem('nextTokenRequest', moment().add(this.tokenExpireTime, \"seconds\").toString())\r\n        return response.data.access_token.toString();\r\n      }\r\n    },\r\n    async callEndPoint(url, method) {\r\n      if (method == `POST`) {\r\n        axios.post(url);\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.getIgbToken()\r\n  }\r\n  \r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}