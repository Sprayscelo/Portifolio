{"ast":null,"code":"import { ref } from 'vue';\n\n// import CryptoJS from 'crypto-js';\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { onMounted } from \"vue\";\nconst __default__ = {\n  name: \"pcBuilderAi\",\n  data() {\n    return {\n      token: \"\",\n      tokenExpireTime: null,\n      lastRequest: null\n    };\n  },\n  methods: {\n    async getIgbToken() {\n      if (moment().isAfter(this.lastRequest) || !this.tokenExpireTime) {\n        let response = await axios.post(`https://id.twitch.tv/oauth2/token?client_id=${process.env.VUE_APP_TWITCH_CLIENT_ID}&client_secret=${process.env.VUE_APP_TWITCH_CLIENT_SECRET}&grant_type=client_credentials`);\n        this.token = response.data.access_token;\n        this.tokenExpireTime = response.data.expires_in;\n        this.lastRequest = moment().add(this.tokenExpireTime, \"seconds\");\n        return response.data.access_token.toString();\n      }\n    },\n    async callEndPoint(url, method) {\n      if (method == `POST`) {\n        axios.post(url);\n      }\n    }\n  },\n  setup() {\n    onMounted(() => {\n      console.log('teste123');\n      this.getIgbToken();\n    });\n  }\n};\nexport default /*#__PURE__*/Object.assign(__default__, {\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const el = ref();\n    onMounted(() => {\n      el.value; // <div>\n    });\n\n    const __returned__ = {\n      el,\n      get axios() {\n        return axios;\n      },\n      get moment() {\n        return moment;\n      },\n      onMounted,\n      ref\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n});","map":{"version":3,"mappings":"AAsDI,SAASA,GAAc,QAAQ,KAAK;;AA5CxC;AACA,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,QAAQ;AAC3B,SAASC,SAAS,QAAQ,KAAK;AAE/B,oBAAe;EAEbC,IAAI,EAAE,aAAa;EACnBC,IAAI,GAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,eAAe,EAAE,IAAI;MACrBC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAW,GAAG;MAClB,IAAIR,MAAM,EAAE,CAACS,OAAO,CAAC,IAAI,CAACH,WAAW,CAAC,IAAI,CAAC,IAAI,CAACD,eAAe,EAAE;QAC/D,IAAIK,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAC5B,+CAA8CC,OAAO,CAACC,GAAG,CAACC,wBAAyB,kBAAiBF,OAAO,CAACC,GAAG,CAACE,4BAA6B,gCAA+B,CAC9K;QACD,IAAI,CAACX,KAAK,GAAGM,QAAQ,CAACP,IAAI,CAACa,YAAY;QACvC,IAAI,CAACX,eAAe,GAAGK,QAAQ,CAACP,IAAI,CAACc,UAAU;QAC/C,IAAI,CAACX,WAAW,GAAGN,MAAM,EAAE,CAACkB,GAAG,CAAC,IAAI,CAACb,eAAe,EAAE,SAAS,CAAC;QAChE,OAAOK,QAAQ,CAACP,IAAI,CAACa,YAAY,CAACG,QAAQ,EAAE;MAC9C;IACF,CAAC;IACD,MAAMC,YAAY,CAACC,GAAG,EAAEC,MAAM,EAAE;MAC9B,IAAIA,MAAM,IAAK,MAAK,EAAE;QACpBvB,KAAK,CAACY,IAAI,CAACU,GAAG,CAAC;MACjB;IACF;EACF,CAAC;EACDE,KAAK,GAAG;IACNtB,SAAS,CAAC,MAAM;MACZuB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACvB,IAAI,CAACjB,WAAW,EAAE;IACtB,CAAC,CAAC;EACJ;AAEF,CAAC;;;;;;IAMD,MAAMkB,EAAE,GAAG5B,GAAG,EAAE;IAEhBG,SAAS,CAAC,MAAM;MACdyB,EAAE,CAACC,KAAK,EAAC;IACX,CAAC,CAAC","names":["ref","axios","moment","onMounted","name","data","token","tokenExpireTime","lastRequest","methods","getIgbToken","isAfter","response","post","process","env","VUE_APP_TWITCH_CLIENT_ID","VUE_APP_TWITCH_CLIENT_SECRET","access_token","expires_in","add","toString","callEndPoint","url","method","setup","console","log","el","value"],"sources":["D:/Area de trabalho/Portifolio/Portifolio/src/components/pcBuilderAi/pcBuilderAi.vue"],"sourcesContent":["<template>\r\n  <div id=\"app-pcBuilderAi\">\r\n    <div id=\"app-pcBuilderAi\">\r\n      <button @click=\"getIgbToken()\">aaaa</button>\r\n      <p>{{ token }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import CryptoJS from 'crypto-js';\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { onMounted } from \"vue\";\r\n\r\nexport default {\r\n  \r\n  name: \"pcBuilderAi\",\r\n  data() {\r\n    return {\r\n      token: \"\",\r\n      tokenExpireTime: null,\r\n      lastRequest: null,\r\n    };\r\n  },\r\n  methods: {\r\n    async getIgbToken() {\r\n      if (moment().isAfter(this.lastRequest) || !this.tokenExpireTime) {\r\n        let response = await axios.post(\r\n          `https://id.twitch.tv/oauth2/token?client_id=${process.env.VUE_APP_TWITCH_CLIENT_ID}&client_secret=${process.env.VUE_APP_TWITCH_CLIENT_SECRET}&grant_type=client_credentials`\r\n        );\r\n        this.token = response.data.access_token;\r\n        this.tokenExpireTime = response.data.expires_in;\r\n        this.lastRequest = moment().add(this.tokenExpireTime, \"seconds\");\r\n        return response.data.access_token.toString();\r\n      }\r\n    },\r\n    async callEndPoint(url, method) {\r\n      if (method == `POST`) {\r\n        axios.post(url);\r\n      }\r\n    },\r\n  },\r\n  setup() {\r\n    onMounted(() => {\r\n        console.log('teste123')\r\n        this.getIgbToken()\r\n    })\r\n  }\r\n\r\n};\r\n</script>\r\n\r\n<script setup>\r\n    import { ref, onMounted } from 'vue'\r\n\r\nconst el = ref()\r\n\r\nonMounted(() => {\r\n  el.value // <div>\r\n})\r\n</script>\r\n\r\n<style>\r\ninput:hover {\r\n  background-color: black;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}