{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"gamesConfig\",\n  data() {\n    return {\n      gameSearched: \"\",\n      gamesFounded: \"\"\n    };\n  },\n  methods: {\n    async searchGames(endpoint, query) {\n      console.log(query);\n      //Always send the same header for this call, dont need to put on the parameter when calling.\n      try {\n        const response = await axios.post(`http://localhost:3000/${endpoint}`, query, {\n          headers: {\n            \"Content-Type\": \"text/plain\"\n          }\n        });\n        return response.data;\n      } catch (error) {\n        console.log(\"callEndPoint ERRO: \" + error);\n        throw error;\n      }\n    }\n  },\n  updated() {\n    console.log(this.gamesFounded);\n  },\n  watch: {\n    gameSearched(nv) {\n      clearTimeout(this.timeout);\n      this.timeout = setTimeout(async () => {\n        try {\n          const gamesData = await this.searchGames(\"games\", `search \"${nv}\"; fields name, screenshots; where platforms = (6);`);\n          var formatGames = await Promise.all(gamesData.map(async game => {\n            setTimeout(null, 1000); // Atraso de 1 segundo\n            if (game.screenshots) {\n              const getUrl = await new Promise(resolve => {\n                setTimeout(async () => {\n                  const result = await this.searchGames(\"screenshots\", `fields url; where id = ${game.screenshots[0]};`);\n                  resolve(result);\n                }, 1000);\n              });\n              return {\n                id: game.id,\n                name: game.name,\n                url: getUrl.url\n              };\n            }\n            return {\n              id: game.id,\n              name: game.name\n            };\n          }));\n          this.gamesFounded = formatGames;\n          console.log(this.gamesFounded);\n        } catch (error) {\n          console.log(\"Erro ao pesquisar jogos:\", error);\n        }\n      }, 2000);\n    }\n  }\n};","map":{"version":3,"mappings":"AAqBA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAI,GAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAW,CAACC,QAAQ,EAAEC,KAAK,EAAE;MACjCC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB;MACA,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMX,KAAK,CAACY,IAAI,CAC9B,yBAAwBL,QAAS,EAAC,EACnCC,KAAK,EACL;UAAEK,OAAO,EAAE;YAAE,cAAc,EAAE;UAAa;QAAE,EAC7C;QACD,OAAOF,QAAQ,CAACT,IAAI;MACtB,EAAE,OAAOY,KAAK,EAAE;QACdL,OAAO,CAACC,GAAG,CAAC,qBAAoB,GAAII,KAAK,CAAC;QAC1C,MAAMA,KAAK;MACb;IACF;EACF,CAAC;EACDC,OAAO,GAAG;IACRN,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,YAAY;EAC/B,CAAC;EACDY,KAAK,EAAE;IACLb,YAAY,CAACc,EAAE,EAAE;MACfC,YAAY,CAAC,IAAI,CAACC,OAAO,CAAC;MAE1B,IAAI,CAACA,OAAM,GAAIC,UAAU,CAAC,YAAY;QACpC,IAAI;UACF,MAAMC,SAAQ,GAAI,MAAM,IAAI,CAACf,WAAW,CACtC,OAAO,EACN,WAAUW,EAAG,qDAAmD,CAClE;UACD,IAAIK,WAAU,GAAI,MAAMC,OAAO,CAACC,GAAG,CACjCH,SAAS,CAACI,GAAG,CAAC,MAAOC,IAAI,IAAK;YAC5BN,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC;YACtB,IAAIM,IAAI,CAACC,WAAW,EAAE;cACpB,MAAMC,MAAK,GAAI,MAAM,IAAIL,OAAO,CAAEM,OAAO,IAAK;gBAC5CT,UAAU,CAAC,YAAY;kBACrB,MAAMU,MAAK,GAAI,MAAM,IAAI,CAACxB,WAAW,CACnC,aAAa,EACZ,0BAAyBoB,IAAI,CAACC,WAAW,CAAC,CAAC,CAAE,GAAC,CAChD;kBACDE,OAAO,CAACC,MAAM,CAAC;gBACjB,CAAC,EAAE,IAAI,CAAC;cACV,CAAC,CAAC;cAEF,OAAO;gBAAEC,EAAE,EAAEL,IAAI,CAACK,EAAE;gBAAE9B,IAAI,EAAEyB,IAAI,CAACzB,IAAI;gBAAE+B,GAAG,EAAEJ,MAAM,CAACI;cAAI,CAAC;YAC1D;YACA,OAAO;cAAED,EAAE,EAAEL,IAAI,CAACK,EAAE;cAAE9B,IAAI,EAAEyB,IAAI,CAACzB;YAAK,CAAC;UACzC,CAAC,EACF;UACD,IAAI,CAACG,YAAW,GAAIkB,WAAW;UAC/Bb,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,YAAY,CAAC;QAChC,EAAE,OAAOU,KAAK,EAAE;UACdL,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEI,KAAK,CAAC;QAChD;MACF,CAAC,EAAE,IAAI,CAAC;IACV;EACF;AACF,CAAC","names":["axios","name","data","gameSearched","gamesFounded","methods","searchGames","endpoint","query","console","log","response","post","headers","error","updated","watch","nv","clearTimeout","timeout","setTimeout","gamesData","formatGames","Promise","all","map","game","screenshots","getUrl","resolve","result","id","url"],"sourceRoot":"","sources":["D:\\Area de trabalho\\Portifolio\\Portifolio\\src\\components\\pcBuilderAi\\gamesConfig.vue"],"sourcesContent":["<template>\r\n  <div id=\"gamesConfigRoot\">\r\n    <div class=\"gamesConfigRoot\">\r\n      <h3>Game card selection</h3>\r\n    </div>\r\n    <div>\r\n      <span> Plase select a game </span>\r\n      <div>\r\n        <input type=\"search\" v-model=\"this.gameSearched\" />\r\n        <div v-if=\"this.gamesFounded\">\r\n          <div v-for=\"games in this.gamesFounded\" :key=\"games.id\">\r\n            <span> {{ games.url ? games.url : 'Nenhuma imagem encontrada' }} </span>\r\n            <span> {{ games.name }} </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"gamesConfig\",\r\n  data() {\r\n    return {\r\n      gameSearched: \"\",\r\n      gamesFounded: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    async searchGames(endpoint, query) {\r\n      console.log(query);\r\n      //Always send the same header for this call, dont need to put on the parameter when calling.\r\n      try {\r\n        const response = await axios.post(\r\n          `http://localhost:3000/${endpoint}`,\r\n          query,\r\n          { headers: { \"Content-Type\": \"text/plain\" } }\r\n        );\r\n        return response.data;\r\n      } catch (error) {\r\n        console.log(\"callEndPoint ERRO: \" + error);\r\n        throw error;\r\n      }\r\n    },\r\n  },\r\n  updated() {\r\n    console.log(this.gamesFounded)\r\n  },\r\n  watch: {\r\n    gameSearched(nv) {\r\n      clearTimeout(this.timeout);\r\n\r\n      this.timeout = setTimeout(async () => {\r\n        try {\r\n          const gamesData = await this.searchGames(\r\n            \"games\",\r\n            `search \"${nv}\"; fields name, screenshots; where platforms = (6);`\r\n          );\r\n          var formatGames = await Promise.all(\r\n            gamesData.map(async (game) => {\r\n              setTimeout(null, 1000)// Atraso de 1 segundo\r\n              if (game.screenshots) {\r\n                const getUrl = await new Promise((resolve) => {\r\n                  setTimeout(async () => {\r\n                    const result = await this.searchGames(\r\n                      \"screenshots\",\r\n                      `fields url; where id = ${game.screenshots[0]};`\r\n                    );\r\n                    resolve(result);\r\n                  }, 1000);\r\n                });\r\n\r\n                return { id: game.id, name: game.name, url: getUrl.url };\r\n              }\r\n              return { id: game.id, name: game.name };\r\n            })\r\n          );\r\n          this.gamesFounded = formatGames;\r\n          console.log(this.gamesFounded);\r\n        } catch (error) {\r\n          console.log(\"Erro ao pesquisar jogos:\", error);\r\n        }\r\n      }, 2000);\r\n    },\r\n  },\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}