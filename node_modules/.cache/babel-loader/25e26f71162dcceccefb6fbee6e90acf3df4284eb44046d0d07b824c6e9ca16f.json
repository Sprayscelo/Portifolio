{"ast":null,"code":"// import CryptoJS from 'crypto-js';\nimport axios from \"axios\";\nimport moment from \"moment\";\nexport default {\n  name: \"pcBuilderAi\",\n  data() {\n    return {\n      token: \"\",\n      tokenExpireTime: null,\n      lastRequest: null\n    };\n  },\n  methods: {\n    async getIgbToken() {\n      if (moment().isAfter(this.lastRequest) || !this.tokenExpireTime) {\n        let response = await axios.post(`https://id.twitch.tv/oauth2/token?client_id=${process.env.VUE_APP_TWITCH_CLIENT_ID}&client_secret=${process.env.VUE_APP_TWITCH_CLIENT_SECRET}&grant_type=client_credentials`);\n        this.token = response.data.access_token;\n        this.tokenExpireTime = response.data.expires_in;\n        this.lastRequest = moment().add(this.tokenExpireTime, \"seconds\");\n        return response.data.access_token.toString();\n      }\n    },\n    async callEndPointIgb(config) {\n      //Always send the same header for this call, dont need to put on the parameter when calling.  \n      config.headers = {\n        \"Client-ID\": process.env.VUE_APP_TWITCH_CLIENT_ID,\n        \"Authorization\": `Bearer ${this.token}`\n      };\n      console.log(config.headers);\n      try {\n        const response = await axios(config);\n        console.log(response);\n      } catch (error) {\n        console.log('callEndPoint ERRO: ' + error);\n      }\n    }\n  },\n  mounted() {\n    this.getIgbToken();\n  }\n};","map":{"version":3,"mappings":"AAWA;AACA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,MAAK,MAAO,QAAQ;AAE3B,eAAe;EAEbC,IAAI,EAAE,aAAa;EACnBC,IAAI,GAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,eAAe,EAAE,IAAI;MACrBC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAW,GAAG;MAClB,IAAIP,MAAM,EAAE,CAACQ,OAAO,CAAC,IAAI,CAACH,WAAW,KAAK,CAAC,IAAI,CAACD,eAAe,EAAE;QAC/D,IAAIK,QAAO,GAAI,MAAMV,KAAK,CAACW,IAAI,CAC5B,+CAA8CC,OAAO,CAACC,GAAG,CAACC,wBAAyB,kBAAiBF,OAAO,CAACC,GAAG,CAACE,4BAA6B,gCAA8B,CAC7K;QACD,IAAI,CAACX,KAAI,GAAIM,QAAQ,CAACP,IAAI,CAACa,YAAY;QACvC,IAAI,CAACX,eAAc,GAAIK,QAAQ,CAACP,IAAI,CAACc,UAAU;QAC/C,IAAI,CAACX,WAAU,GAAIL,MAAM,EAAE,CAACiB,GAAG,CAAC,IAAI,CAACb,eAAe,EAAE,SAAS,CAAC;QAChE,OAAOK,QAAQ,CAACP,IAAI,CAACa,YAAY,CAACG,QAAQ,EAAE;MAC9C;IACF,CAAC;IACD,MAAMC,eAAe,CAACC,MAAM,EAAE;MAC5B;MACAA,MAAM,CAACC,OAAM,GAAI;QAAC,WAAW,EAAEV,OAAO,CAACC,GAAG,CAACC,wBAAwB;QAAE,eAAe,EAAG,UAAS,IAAI,CAACV,KAAM;MAAC;MAC5GmB,OAAO,CAACC,GAAG,CAACH,MAAM,CAACC,OAAO;MAC1B,IAAI;QACF,MAAMZ,QAAO,GAAI,MAAMV,KAAK,CAACqB,MAAM;QACnCE,OAAO,CAACC,GAAG,CAACd,QAAQ;MACtB,CAAC,QAAMe,KAAK,EAAE;QACZF,OAAO,CAACC,GAAG,CAAC,qBAAoB,GAAIC,KAAK;MAC3C;IACF;EACF,CAAC;EACDC,OAAO,GAAG;IACR,IAAI,CAAClB,WAAW,EAAC;EACnB;AAEF,CAAC","names":["axios","moment","name","data","token","tokenExpireTime","lastRequest","methods","getIgbToken","isAfter","response","post","process","env","VUE_APP_TWITCH_CLIENT_ID","VUE_APP_TWITCH_CLIENT_SECRET","access_token","expires_in","add","toString","callEndPointIgb","config","headers","console","log","error","mounted"],"sourceRoot":"","sources":["D:\\Area de trabalho\\Portifolio\\Portifolio\\src\\components\\pcBuilderAi\\pcBuilderAi.vue"],"sourcesContent":["<template>\r\n  <div id=\"pcBuilderAi\">\r\n    <div id=\"pcBuilderAi\">\r\n      <button @click=\"callEndPointIgb({url: 'https://api.igdb.com/v4/games/', data:'fields *; limit 100'})\">aaaa</button>\r\n      <p>{{ token }}</p>\r\n      <div ref=\"el\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import CryptoJS from 'crypto-js';\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nexport default {\r\n  \r\n  name: \"pcBuilderAi\",\r\n  data() {\r\n    return {\r\n      token: \"\",\r\n      tokenExpireTime: null,\r\n      lastRequest: null,\r\n    };\r\n  },\r\n  methods: {\r\n    async getIgbToken() {\r\n      if (moment().isAfter(this.lastRequest) || !this.tokenExpireTime) {\r\n        let response = await axios.post(\r\n          `https://id.twitch.tv/oauth2/token?client_id=${process.env.VUE_APP_TWITCH_CLIENT_ID}&client_secret=${process.env.VUE_APP_TWITCH_CLIENT_SECRET}&grant_type=client_credentials`\r\n        );\r\n        this.token = response.data.access_token;\r\n        this.tokenExpireTime = response.data.expires_in;\r\n        this.lastRequest = moment().add(this.tokenExpireTime, \"seconds\");\r\n        return response.data.access_token.toString();\r\n      }\r\n    },\r\n    async callEndPointIgb(config) {\r\n      //Always send the same header for this call, dont need to put on the parameter when calling.  \r\n      config.headers = {\"Client-ID\": process.env.VUE_APP_TWITCH_CLIENT_ID, \"Authorization\": `Bearer ${this.token}`}\r\n      console.log(config.headers)\r\n      try {\r\n        const response = await axios(config)\r\n        console.log(response)\r\n      }catch(error) {\r\n        console.log('callEndPoint ERRO: ' + error)\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.getIgbToken()\r\n  }\r\n  \r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}