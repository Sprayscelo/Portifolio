{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  id: \"gamesConfigRoot\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"gamesConfigRoot\"\n}, [/*#__PURE__*/_createElementVNode(\"h3\", null, \"Game card selection\")], -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"span\", null, \" Plase select a game \", -1 /* HOISTED */);\nconst _hoisted_4 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", null, [_hoisted_3, _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"search\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => this.gameSearched = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, this.gameSearched]]), this.gamesFounded ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(this.gamesFounded, games => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: games.id\n    }, [_createElementVNode(\"span\", null, _toDisplayString(games.name), 1 /* TEXT */), _createElementVNode(\"span\", null, _toDisplayString(this.gamesFounded), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)])])]);\n}","map":{"version":3,"mappings":";;EACOA,EAAE,EAAC;AAAiB;gCACvBC,oBAEM;EAFDC,KAAK,EAAC;AAAiB,iBAC1BD,oBAA4B,YAAxB,qBAAmB;gCAGvBA,oBAAkC,cAA5B,uBAAqB;;;;;uBAL/BE,oBAgBM,OAhBNC,UAgBM,GAfJC,UAEM,EACNJ,oBAWM,cAVJK,UAAkC,EAClCL,oBAQM,8BAPJA,oBAAmD;IAA5CM,IAAI,EAAC,QAAQ;oEAAeC,YAAY;sDAAZA,YAAY,UAC/BC,YAAY,kBAA5BN,oBAKM,uCAJJA,oBAGMO,kCAHoBD,YAAY,EAA1BE,KAAK;yBAAjBR,oBAGM;MAHmCS,GAAG,EAAED,KAAK,CAACX;QAClDC,oBAA+B,+BAArBU,KAAK,CAACE,IAAI,kBACpBZ,oBAAkC,oCAArBQ,YAAY","names":["id","_createElementVNode","class","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","type","gameSearched","gamesFounded","_Fragment","games","key","name"],"sourceRoot":"","sources":["D:\\Area de trabalho\\Portifolio\\Portifolio\\src\\components\\pcBuilderAi\\gamesConfig.vue"],"sourcesContent":["<template>\r\n  <div id=\"gamesConfigRoot\">\r\n    <div class=\"gamesConfigRoot\">\r\n      <h3>Game card selection</h3>\r\n    </div>\r\n    <div>\r\n      <span> Plase select a game </span>\r\n      <div>\r\n        <input type=\"search\" v-model=\"this.gameSearched\" />\r\n        <div v-if=\"this.gamesFounded\">\r\n          <div v-for=\"games in this.gamesFounded\" :key=\"games.id\">\r\n            <span> {{ games.name }} </span>\r\n            <span>{{this.gamesFounded}}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"gamesConfig\",\r\n  data() {\r\n    return {\r\n      gameSearched: \"\",\r\n      gamesFounded: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    async searchGames(endpoint, query) {\r\n      console.log(query);\r\n      //Always send the same header for this call, dont need to put on the parameter when calling.\r\n      try {\r\n        const response = await axios.post(\r\n          `http://localhost:3000/${endpoint}`,\r\n          query,\r\n          { headers: { \"Content-Type\": \"text/plain\" } }\r\n        );\r\n        return response.data;\r\n      } catch (error) {\r\n        console.log(\"callEndPoint ERRO: \" + error);\r\n        throw error;\r\n      }\r\n    },\r\n  },\r\n  watch: {\r\n    gameSearched(nv) {\r\n      clearTimeout(this.timeout);\r\n\r\n      this.timeout = setTimeout(async () => {\r\n        try {\r\n          const gamesData = await this.searchGames(\r\n            \"games\",\r\n            `search \"${nv}\"; fields name, screenshots; where platforms = (6);`\r\n          );\r\n          var formatGames = await Promise.all(\r\n            gamesData.map(async (game) => {\r\n              setTimeout(null, 5000)// Atraso de 5 segundos\r\n              if (game.screenshots ?? false) {\r\n                const getUrl = await new Promise((resolve) => {\r\n                  setTimeout(async () => {\r\n                    const result = await this.searchGames(\r\n                      \"screenshots\",\r\n                      `fields url; where id = ${game.screenshots[0]};`\r\n                    );\r\n                    resolve(result);\r\n                  }, 1000);\r\n                });\r\n\r\n                return { id: game.id, name: game.name, url: getUrl.url };\r\n              }\r\n              console.log('chegou aqui')\r\n            })\r\n          );\r\n          this.gamesFounded = formatGames;\r\n          console.log(this.gamesFounded);\r\n        } catch (error) {\r\n          console.log(\"Erro ao pesquisar jogos:\", error);\r\n        }\r\n      }, 2000);\r\n    },\r\n  },\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}