{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"gamesConfigRoot\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"gamesConfigRoot\"\n}, [/*#__PURE__*/_createElementVNode(\"h3\", null, \"Game card selection\")], -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"span\", null, \" Plase select a game \", -1 /* HOISTED */);\nconst _hoisted_4 = {\n  key: \"\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"span\", null, null, -1 /* HOISTED */);\nconst _hoisted_6 = [_hoisted_5];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => {\n      $options.searchGames('games', `fields name; where platforms = 6;`);\n    })\n  }, \" Pequisar \"), _hoisted_2, _createElementVNode(\"div\", null, [_hoisted_3, _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"search\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.gameSearched = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.gameSearched]]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(this.gamesFounded, games => {\n    return _openBlock(), _createElementBlock(\"div\", _hoisted_4, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"mappings":";;EACSA,EAAE,EAAC;AAAiB;gCAIrBC,oBAEM;EAFDC,KAAK,EAAC;AAAiB,iBACxBD,oBAA4B,YAAxB,qBAAmB;gCAGvBA,oBAEO,cAFD,uBAEN;;EAG6CE,GAAG,EAAJ;AAAO;gCAC3CF,oBAAc;oBAAdG,UAAc;;uBAd9BC,oBAkBM,OAlBNC,UAkBM,GAjBFL,oBAES;IAFAM,OAAK;MAAEC,oBAAW;IAAA;KAAgD,YAE3E,GACAC,UAEM,EACNR,oBAUM,cATFS,UAEO,EACPT,oBAKM,8BAJFA,oBAA4C;IAArCU,IAAI,EAAC,QAAQ;+DAAUC,kBAAY;iDAAZA,kBAAY,wBAC1CP,oBAEMQ,kCAFoBC,YAAY,EAA1BC,KAAK;yBAAjBV,oBAEM,OAFNW,UAEM","names":["id","_createElementVNode","class","key","_hoisted_5","_createElementBlock","_hoisted_1","onClick","$options","_hoisted_2","_hoisted_3","type","$data","_Fragment","gamesFounded","games","_hoisted_4"],"sourceRoot":"","sources":["D:\\Area de trabalho\\Portifolio\\Portifolio\\src\\components\\pcBuilderAi\\gamesConfig.vue"],"sourcesContent":["<template>\r\n    <div id=\"gamesConfigRoot\">\r\n        <button @click=\"searchGames('games', `fields name; where platforms = 6;`)\">\r\n            Pequisar\r\n        </button>\r\n        <div class=\"gamesConfigRoot\">\r\n            <h3>Game card selection</h3>\r\n        </div>\r\n        <div>\r\n            <span>\r\n                Plase select a game\r\n            </span>\r\n            <div>\r\n                <input type=\"search\" v-model=\"gameSearched\">\r\n                <div v-for=\"games in this.gamesFounded\" :key=\"\">\r\n                    <span> </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    \r\n  name: \"gamesConfig\",\r\n  data() {\r\n    return {\r\n        gameSearched: \"League\",\r\n        gamesFounded: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    async searchGames(endpoint, query) {\r\n      //Always send the same header for this call, dont need to put on the parameter when calling.  \r\n      try {\r\n        const response = await axios.post(`http://localhost:3000/${endpoint}`, `search \"${this.gameSearched}\"; ` + query, {headers: {\"Content-Type\": 'text/plain'}})\r\n        this.gamesFounded = response.data\r\n        console.log(response)\r\n      }catch(error) {\r\n        console.log('callEndPoint ERRO: ' + error)\r\n      }\r\n    },\r\n  },\r\n  computed: {\r\n    \r\n  },    \r\n  mounted() {\r\n    this.getIgbToken()\r\n  }\r\n  \r\n};\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}