{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderSlot as _renderSlot, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"selectButtonRoot\"\n};\nconst _hoisted_2 = {\n  class: \"dropDownButtonContainer\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [!$props.input ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \"Selecione uma opção jogo\")) : _createCommentVNode(\"v-if\", true), $props.input ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n    key: 1,\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchedKey = $event),\n    placeholder: \"Digite o jogo desejado...\"\n  }, null, 512 /* NEED_PATCH */)), [[_vModelText, $data.searchedKey]]) : _createCommentVNode(\"v-if\", true), _renderSlot(_ctx.$slots, \"default\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(this.$props.arrayList, item => {\n    return _openBlock(), _createElementBlock(\"ul\", {\n      key: item.id\n    }, [_createElementVNode(\"li\", null, _toDisplayString(item.name), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;AAAkB;;EACpBA,KAAK,EAAC;AAAyB;;;;;uBADxCC,oBASM,OATNC,UASM,GARFC,oBAOM,OAPNC,UAOM,IANWC,YAAK,kBAAlBJ,oBAAmD,oBAA/B,0BAAwB,wCACGI,YAAK,kCAApDJ,oBAA8F;;IAAvFK,IAAI,EAAC,MAAM;+DAAUC,iBAAW;IAAeC,WAAW,EAAC;kDAAtCD,iBAAW,yCACvCE,YAAaC,4CACbT,oBAEKU,kCAFmBN,MAAM,CAACO,SAAS,EAA7BC,IAAI;yBAAfZ,oBAEK;MAFsCa,GAAG,EAAED,IAAI,CAACE;QACjDZ,oBAAsB,6BAAhBU,IAAI,CAACG,IAAI","names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$props","type","$data","placeholder","_renderSlot","_ctx","_Fragment","arrayList","item","key","id","name"],"sourceRoot":"","sources":["D:\\Area de trabalho\\Portifolio\\Portifolio\\src\\components\\utilities\\dropdown.vue"],"sourcesContent":["<template>\r\n    <div class=\"selectButtonRoot\">\r\n        <div class=\"dropDownButtonContainer\">\r\n            <span v-if=\"!input\">Selecione uma opção jogo</span>\r\n            <input type=\"text\" v-model=\"searchedKey\" v-if=\"input\" placeholder=\"Digite o jogo desejado...\">\r\n            <slot></slot>\r\n            <ul v-for=\"item in this.$props.arrayList\" :key=\"item.id\">\r\n                <li>{{item.name}}</li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: 'selectButton',\r\n        props: ['input', 'searchKey', 'arrayList'],\r\n        data() {\r\n            return {\r\n                searchedKey: this.$props.searchKey,\r\n                searchedGame: ''\r\n            }\r\n        },\r\n        watch: {\r\n            searchedKey() {\r\n                if(this.$props.input) {\r\n                    console.log('teste')\r\n                    const letters = new RegExp(`${this.searchedGames}`, 'i')\r\n                    this.$props.arrayList = this.$props.arrayList.filter(object => letters.test(object.name))\r\n                    console.log(this.$props.arrayList)\r\n                }\r\n            },\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n    .dropDownButtonContainer {\r\n        input {\r\n            color: black;\r\n            border-radius: 5px ;\r\n            border: solid 1px gray;\r\n            text-indent: 3px;\r\n            height: 1.2rem;\r\n            font-family: 'Montserrat', sans-serif;\r\n            font-weight: bold;\r\n            padding: 5px;\r\n        }\r\n        input:focus {\r\n            outline: none;\r\n            box-shadow: 0px 0px 3px 0px;\r\n            transition: all 0.2s ease-in;\r\n        }\r\n        ul {\r\n            list-style: none;\r\n            padding: 0\r\n        }\r\n    }\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}